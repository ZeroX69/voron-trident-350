[probe_eddy_current fly_eddy_probe]
sensor_type: ldc1612
#frequency: 40000000 # Frequency set to 40MHz
i2c_address: 43
i2c_mcu: SHT36
i2c_bus: i2c1e
x_offset: 0 # Remember to set x offset
y_offset: 50 # Remember to set y offset
z_offset: 2
speed:10
lift_speed: 15.0
i2c_speed: 4000000

[temperature_probe fly_eddy_probe]
sensor_type: Generic 3950
sensor_pin:SHT36:gpio28
[gcode_macro CALIBRATE_EDDY]
description: Execute Eddy Current Sensor Calibration and Subsequent Leveling Process
gcode:
    # ========== Start Calibrating Eddy Current Sensor ==========
    M117 Starting Eddy Current Sensor Calibration...
    # Safety Check: Verify if the printer is in pause state
    {% if printer.pause_resume.is_paused|lower == 'true' %}
        {action_raise_error("Please resume printing before calibration")}
    {% endif %}
    M84
    G28 X Y
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F6000
    SET_KINEMATIC_POSITION Z=0
    # Execute Calibration Process 
    LDC_CALIBRATE_DRIVE_CURRENT CHIP=fly_eddy_probe 
    # Attempt to output DRIVE_CURRENT_FEEDBACK value
    M117 Eddy Current Calibration Complete, Feedback Value: {DRIVE_CURRENT_FEEDBACK}
    # Check if Feedback Value is within Normal Range
    {% if DRIVE_CURRENT_FEEDBACK is defined %}
        {% if DRIVE_CURRENT_FEEDBACK < 10 or DRIVE_CURRENT_FEEDBACK > 20 %}
            M117 Warning: Eddy Current Feedback Value Abnormal ({DRIVE_CURRENT_FEEDBACK}). Please check connections.
        {% else %}
            M117 Eddy Current Feedback Value Normal ({DRIVE_CURRENT_FEEDBACK}).
        {% endif %}
    {% else %}
        M117 Error: Unable to retrieve DRIVE_CURRENT_FEEDBACK value.
    {% endif %}
    
    G1 Z15 F300
    
    # Prompt user to perform manual Z Offset Calibration
    M117 Please perform manual Z Offset Calibration.
    SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}
    # Execute Eddy Effective Distance Calibration
    PROBE_EDDY_CURRENT_CALIBRATE CHIP=fly_eddy_probe 
    # Indicate Calibration Completion
    M117 All Calibration Processes Completed!
[gcode_macro TEMP_COMPENSATION]
description: Temperature Compensation Calibration Process
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set temperature_range_value = params.TEMPERATURE_RANGE_VALUE|default(3)|int %}
  {% set desired_temperature = params.DESIRED_TEMPERATURE|default(80)|int %}
  {% set Temperature_Timeout_Duration = params.TEMPERATURE_TIMEOUT_DURATION|default(6500000000)|int %}
    # Safety check: Ensure all axes are unlocked
    {% if printer.pause_resume.is_paused %}
        { action_raise_error("Error: Printer is paused. Please resume first.") }
    {% endif %}
    # Step 1: Home all axes
    STATUS_MESSAGE="Homing all axes..."
    G28
    STATUS_MESSAGE="Homing completed"
    # Step 2: Auto-leveling
    Z_TILT_ADJUST
    # Step 3: Safely raise the Z-axis
    STATUS_MESSAGE="Raising Z-axis..."
    G90
    G0 Z5 F2000  # Raise slowly to prevent collisions
    # Step 4: Set timeout and temperature calibration
    SET_IDLE_TIMEOUT TIMEOUT={Temperature_Timeout_Duration}
    STATUS_MESSAGE="Starting temperature probe calibration..."
    TEMPERATURE_PROBE_CALIBRATE PROBE=fly_eddy_probe TARGET={desired_temperature} STEP={temperature_range_value}
    # Step 5: Set printing temperatures (modify as needed)
    STATUS_MESSAGE="Setting working temperatures..."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle_temp}
    # Completion message
    STATUS_MESSAGE="Temperature compensation process completed!"
    description: G-Code macro
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode: 
       _BED_MESH_CALIBRATE horizontal_move_z=2 METHOD=rapid_scan {rawparams}
       G28 X Y
[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    # ========== State Save ==========
    SAVE_GCODE_STATE NAME=STATE_Z_TILT
    
    # ========== Environment Preparation ==========
    BED_MESH_CLEAR                       # Clear old bed mesh data 
    
    # ========== Main Leveling Process ==========
    {% if not printer.z_tilt.applied %}
        # Initial Coarse Adjustment 
        _Z_TILT_ADJUST horizontal_move_z=10 retry_tolerance=1
        G0 Z10 F6000                     # Use standard G-code commands instead of HORIZONTAL_MOVE_Z
    {% endif %}
    
    # Fine Secondary Leveling 
     _Z_TILT_ADJUST horizontal_move_z=2 retry_tolerance=0.005 retries=20 METHOD=rapid_scan ADAPTIVE=1
        G0 Z10 F6000                     # Use standard G-code commands instead of HORIZONTAL_MOVE_Z
    # ========== Post-Processing ==========
    G90                                 # Force absolute coordinate mode 
    G0 Z10 F6000                        # Raise Z axis to safe height 
    M117 Z_tilt Completed                  # Display completion status 
    G28                                 # Return to origin
    # ========== State Restore ==========
    RESTORE_GCODE_STATE NAME=STATE_Z_TILT
    M400          
[force_move]
enable_force_move: true
[gcode_macro CALIBRATE_DD]
description: Mobile axis macro
gcode:
    # Reset X/Y Axis 
    G28 X Y 
    # Move the print head to the center of the heated bed (compatible with most CoreXY models)
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F6000 
    SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}
[save_variables]
filename: ~/printer_data/config/variables.cfg
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}
[gcode_macro G28]
rename_existing: G28.1
gcode:
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current fly_eddy_probe'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }
